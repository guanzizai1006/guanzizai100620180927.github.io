<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <link href="/2018/09/26/linux%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
      <url>/2018/09/26/linux%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>#源目录： 三、Linux相关-&gt;linux命令总结</p><h2 id="1-linux-下删除文件夹的命令。"><a href="#1-linux-下删除文件夹的命令。" class="headerlink" title="1. linux 下删除文件夹的命令。"></a>1. linux 下删除文件夹的命令。</h2><pre><code>使用rm -rf 目录名字 命令即可【    -r 就是向下递归，不管有多少级目录，一并删除    -f 就是直接强行删除，不作任何提示的意思】 eg. 删除文件夹实例：rm -rf /var/log/httpd/access将会删除/var/log/httpd/access目录以及其下所有文件、文件夹删除文件使用实例：rm -f /var/log/httpd/access.log将会强制删除/var/log/httpd/access.log这个文件</code></pre><p>源文档 <a href="https://www.cnblogs.com/winifred-tang94/p/5863722.html" target="_blank" rel="noopener">https://www.cnblogs.com/winifred-tang94/p/5863722.html</a> </p><p>另外一个链接如下： <a href="https://blog.csdn.net/coldplayplay/article/details/78649731" target="_blank" rel="noopener">https://blog.csdn.net/coldplayplay/article/details/78649731</a></p><h2 id="2-命令。"><a href="#2-命令。" class="headerlink" title="2. 命令。"></a>2. 命令。</h2><pre> whereis pip   #能够查找所有相关的pip东西。 pip list           #能够列出所有用pip安装好的内容。</pre><h2 id="3-通过pip给python3安装-某包"><a href="#3-通过pip给python3安装-某包" class="headerlink" title="3. 通过pip给python3安装 某包"></a>3. 通过pip给python3安装 某包</h2><p><img src="http://pf6sbcbe5.bkt.clouddn.com/6.png" alt=""></p><blockquote><p>三种引号都表示字符串</p><ol start="3"><li>单引号表示的字符串里可包含双引号，当然不能包含单引号</li><li>双引号表示的字符串里可以包含单引号，字符串都只能有一行</li><li>三个引号能包含多行字符串，同时常常出现在函数的声明的下一行，来注释函数的功能，与众不同的地方在于，这个注释作为函数的一个默认属性，可以通过 函数名.<strong>doc</strong> 来访问</li></ol></blockquote><p>源文档 <a href="https://zhidao.baidu.com/question/1303536101501491899.html" target="_blank" rel="noopener">https://zhidao.baidu.com/question/1303536101501491899.html</a> </p><pre>终端界面， Ctrl+ 符号 -   则缩小界面终端界面， Ctrl+Shift + 符号+   则放大界面。Ctrl+l          清屏Ctrl+c          终止当前程序Ctrl+z          将当前程序移到后台执行，如同输入的命令后面加&Ctrl+r          查询最近执行过的命令Ctrl+a          光标移到当前行首Ctrl+e          光标移到当前行尾Ctrl+k          删除从光标开始到结尾的所有字符Ctrl+Shift+t    打开一个新的终端窗口</pre><p>源文档 <a href="http://www.bjhee.com/linux-terminal.html" target="_blank" rel="noopener">http://www.bjhee.com/linux-terminal.html</a> </p>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/09/26/Git%E5%92%8CGitHub%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/"/>
      <url>/2018/09/26/Git%E5%92%8CGitHub%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<p>#源文件：三、Linux相关-&gt; Git 和 GitHub 的使用方法汇总</p><p><a href="https://www.cnblogs.com/fnng/archive/2011/08/25/2153807.html" target="_blank" rel="noopener">参考链接如下</a></p><h2 id="1-我们需要使用git在本地创建一个相同的项目。"><a href="#1-我们需要使用git在本地创建一个相同的项目。" class="headerlink" title="1. 我们需要使用git在本地创建一个相同的项目。"></a>1. 我们需要使用git在本地创建一个相同的项目。</h2><pre><code>&lt;pre&gt;$ makdir ~/hello-world    //创建一个项目hello-world$ cd ~/hello-world    //打开这个项目$ git init    //初始化 $ touch README$ git add README   //更新README文件$ git commit -m &apos;first commit&apos;//提交更新，并注释信息“first commit” $ git remote add origin git@github.com:defnngj/hello-world.git   //连接远程github项目  $ git push -u origin master   //将本地项目更新到github项目上去&lt;/pre&gt;源文档 &lt;https://www.cnblogs.com/fnng/archive/2011/08/25/2153807.html&gt; </code></pre><h2 id="2-Git的诞生"><a href="#2-Git的诞生" class="headerlink" title="2. Git的诞生"></a>2. Git的诞生</h2><pre><code>Linus Torvalds在1991年创建了开源系统Linux，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！然后，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了。源文档 &lt;http://www.testclass.net/git/git-github-start/&gt; </code></pre><h2 id="3-更改readme文件！！！"><a href="#3-更改readme文件！！！" class="headerlink" title="3. 更改readme文件！！！"></a>3. 更改readme文件！！！</h2><pre><code>第一步尝试失败：  &lt;pre&gt;Bruce Lee@Bruce MINGW64 ~/bruce_demo_pack (master)$ vim READMEBruce  Lee@Bruce MINGW64 ~/bruce_demo_pack (master)$ git push -u origin masterEverything up-to-dateBranch &apos;master&apos; set up to track remote branch &apos;master&apos; from &apos;origin&apos;.&lt;/pre&gt;单独更改了其中的README文件后，直接执行“git push -u origin master”语句，其并不能同步到GitHub网站上去。</code></pre><blockquote><p>Note:   在第一次远程链接某项目时，这一句，必不可少！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:guanzizai1006/bruce_demo_pack.git</span><br></pre></td></tr></table></figure></p></blockquote><p>  第二次尝试成功：<br>        <pre><br>        Bruce  Lee@Bruce MINGW64 ~/bruce_demo_pack (master)<br>        $ git commit -m “用git commit -m 提交更新”<br>        [master bffe44a] “用git commit -m 提交更新<br>         1 file changed, 11 insertions(+)<br>        </pre></p><p>  使用此命令，  </p><pre><code>&lt;pre&gt;$ git commit -m &quot;用git commit -m 提交更新&quot;  //双引号内是添加的评论内容,成功提交更新，下一步是要push上去！$ git push -u origin master Bruce  Lee@Bruce MINGW64 ~/bruce_demo_pack (master)$ git push -u origin masterCounting objects: 3, done.Delta compression using up to 4 threads.Compressing objects: 100% (2/2), done.Writing objects: 100% (3/3), 660 bytes | 660.00 KiB/s, done.Total 3 (delta 0), reused 0 (delta 0)To github.com:guanzizai1006/bruce_demo_pack.git   13cf1ed..bffe44a  master -&gt; masterBranch &apos;master&apos; set up to track remote branch &apos;master&apos; from &apos;origin&apos;.&lt;/pre&gt;</code></pre><h2 id="4-当本地项目中，新添加了一个-py-文件后，要上传到云端。"><a href="#4-当本地项目中，新添加了一个-py-文件后，要上传到云端。" class="headerlink" title="4. 当本地项目中，新添加了一个 py 文件后，要上传到云端。"></a>4. 当本地项目中，新添加了一个 py 文件后，要上传到云端。</h2><pre>$ git add one.py     //更新README文件$ git commit -m 'add the file named one.py'   //提交更新，并注释信息“first commit，用以说明本次更新的是啥” 源文档 <https: 25="" 2011="" www.cnblogs.com="" fnng="" archive="" 08="" 2153807.html=""> 【当然，这时候可以考虑，要不要远程连接github项目。 $ git remote add origin git@github.com:guanzizai1006/bruce_demo_pack.git】$ git push -u origin master//将本地项目更新到github项目上去</https:></pre><h2 id="5-克隆到本地。"><a href="#5-克隆到本地。" class="headerlink" title="5. 克隆到本地。"></a>5. 克隆到本地。</h2><p>（前期准备阶段）<br>首先，下载安装Git。</p><p>其次，通过Git生成本地公钥，并且将公钥添加到GitHub中。</p><p>最后，设置仓库人员的用户名和邮箱地址。</p><p>用  git clone   命令，克隆到目标路径。<br>（ssh 方式）</p><p><img src="http://pf6sbcbe5.bkt.clouddn.com/1.png" alt="克隆到本地"></p><p>或者  （http 方式）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  git clone https://github.com/defnngj/project-name</span><br></pre></td></tr></table></figure><blockquote><p>“git add” 命令对当前目录下的文件添加跟踪。这个命令后面 加一个 点 . 则意味着路径下的所有文件<br>“git commit” 命令将添加文件提交到本地仓库。<br>“git push” 将本地项目提交到远程仓库GitHub。<br>除第一次下载项目需要通过 “git clone” 将项目克隆到本地外,后续再使用 “git pull” 命令时会直接将更新拉取到本地</p></blockquote><pre>$ git pull origin master</pre>源文档 <http: www.testclass.net="" git="" git-github-used=""> ## 6.命令行，windows进入别的盘符<pre>Bruce  Lee@Bruce MINGW64 ~$ cd /d</pre>Git的入门学习和使用。<https: 51694888="" blog.csdn.net="" tonyshengtan="" article="" details="">————————Linux下安装git 并下载码云仓库——————————————<pre>bruce@bruce-virtual-machine:~$ sudo apt-get install git[sudo] bruce 的密码： 正在读取软件包列表... 完成正在分析软件包的依赖关系树       正在读取状态信息... 完成       git 已经是最新版 (1:2.7.4-0ubuntu1.4)。升级了 0 个软件包，新安装了 0 个软件包，要卸载 0 个软件包，有 83 个软件包未被升级。</pre><ul><li><p>新建本地文件夹</p><pre>bruce@bruce-virtual-machine:~/桌面$ mkdir face_fatigue_detection</pre></li><li><p>克隆到本地</p><pre>bruce@bruce-virtual-machine:~/桌面/face_fatigue_detection$ git clone https://gitee.com/thc1234/face_fatigue_detection.git正克隆到 'face_fatigue_detection'...Username for 'https://gitee.com': guanzizai1006Password for 'https://Bruce@gitee.com': </pre></li><li><p>克隆完成啦</p><pre>bruce@bruce-virtual-machine:~/桌面/face_fatigue_detection$ git clone https://gitee.com/thc1234/face_fatigue_detection.git正克隆到 'face_fatigue_detection'...Username for 'https://gitee.com': guanzizai1006Password for 'https://guanzizai1006@gitee.com': remote: Enumerating objects: 405, done.remote: Counting objects: 100% (405/405), done.remote: Compressing objects: 100% (398/398), done.remote: Total 405 (delta 196), reused 0 (delta 0)接收对象中: 100% (405/405), 113.33 MiB | 1.23 MiB/s, 完成.处理 delta 中: 100% (196/196), 完成.</pre></li></ul><p>———————— Git配置 gitee码云————————————————————</p><p>由本地文件夹更新到云端的话，则只要命令行 ./push.sh 则可以完成了。</p><p>由云端更新到本地，只需要在本地目录下，执行  git pull 就OK了。</p><p>————————————————————————————————————</p><h2 id="7-查看当前路径的“完整路径”"><a href="#7-查看当前路径的“完整路径”" class="headerlink" title="7. 查看当前路径的“完整路径”"></a>7. 查看当前路径的“完整路径”</h2><p><img src="http://pf6sbcbe5.bkt.clouddn.com/2.png" alt="查看当前路径"></p><h2 id="8-新建本地文件夹后，克隆云端内容到本地目录"><a href="#8-新建本地文件夹后，克隆云端内容到本地目录" class="headerlink" title="8. 新建本地文件夹后，克隆云端内容到本地目录"></a>8. 新建本地文件夹后，克隆云端内容到本地目录</h2><p><img src="http://pf6sbcbe5.bkt.clouddn.com/3.png" alt="查看当前路径"></p><h2 id="9-运行sh文件，"><a href="#9-运行sh文件，" class="headerlink" title="9. 运行sh文件，"></a>9. 运行sh文件，</h2><p><img src="http://pf6sbcbe5.bkt.clouddn.com/4.png" alt="查看当前路径"></p><h2 id="10-sh-文件内容如下："><a href="#10-sh-文件内容如下：" class="headerlink" title="10.  sh 文件内容如下："></a>10.  sh 文件内容如下：</h2><pre>#!/bin/bashgit add ./*git commit -m "shell"git push</pre><p>截图如下<br><img src="http://pf6sbcbe5.bkt.clouddn.com/5.png" alt="查看当前路径"></p></https:></http:>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/09/26/book___Bite_of_python/"/>
      <url>/2018/09/26/book___Bite_of_python/</url>
      <content type="html"><![CDATA[<p>#源目录： 三、Linux相关-&gt;Linux - Bite-of-python</p><blockquote><p>这里整理的是我本人阅读《Bite Of python》一书的一些笔记。</p></blockquote><h1 id="《bite-of-python》"><a href="#《bite-of-python》" class="headerlink" title="《bite of python》"></a>《bite of python》</h1><h2 id="3-转义字符"><a href="#3-转义字符" class="headerlink" title="3. 转义字符"></a>3. 转义字符</h2><h2 id="4-数据类型"><a href="#4-数据类型" class="headerlink" title="4. 数据类型"></a>4. 数据类型</h2><h2 id="5-逻辑行与物理行"><a href="#5-逻辑行与物理行" class="headerlink" title="5. 逻辑行与物理行"></a>5. 逻辑行与物理行</h2><h2 id="6-运算符和表达式"><a href="#6-运算符和表达式" class="headerlink" title="6. 运算符和表达式"></a>6. 运算符和表达式</h2>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/09/26/SSD%E6%A1%86%E6%9E%B6%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AE%AD%E7%BB%83%E9%9B%86/"/>
      <url>/2018/09/26/SSD%E6%A1%86%E6%9E%B6%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AE%AD%E7%BB%83%E9%9B%86/</url>
      <content type="html"><![CDATA[<p>#源目录： 十一、caffe-ssd抽烟检测-&gt; SSD框架训练自己的数据集</p><p>##1. 链接如下：<br><a href="https://blog.csdn.net/u013738531/article/details/56678247" target="_blank" rel="noopener">https://blog.csdn.net/u013738531/article/details/56678247</a></p><h2 id="2-Ubuntu上配置caffe-SSD及demo演示"><a href="#2-Ubuntu上配置caffe-SSD及demo演示" class="headerlink" title="2. Ubuntu上配置caffe+SSD及demo演示"></a>2. Ubuntu上配置caffe+SSD及demo演示</h2><p>源文档 <a href="https://blog.csdn.net/u013738531/article/details/56678247" target="_blank" rel="noopener">https://blog.csdn.net/u013738531/article/details/56678247</a> </p><p>##3. Ubuntu16.04+Caffe(CPU Only)<br><a href="https://blog.csdn.net/qiusuoxiaozi/article/details/55272004" target="_blank" rel="noopener">https://blog.csdn.net/qiusuoxiaozi/article/details/55272004</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/06/24/ubuntu16.04%E5%AE%89%E8%A3%85opencv2.4.13.6byBruce/"/>
      <url>/2018/06/24/ubuntu16.04%E5%AE%89%E8%A3%85opencv2.4.13.6byBruce/</url>
      <content type="html"><![CDATA[<p>#Ubuntu16.04安装opencv2.4.13.6及配置环境</p><p>##1.准备阶段<br>官网下载源码包，存到Linux下的“下载”，并解压。<br>bruce@bruce-virtual-machine:~/下载$ unzip opencv-2.4.13.6.zip</p><p>##2.    （第一步）安装编译工具。<br>bruce@bruce-virtual-machine:~$ sudo apt-get install build-essential<br>则会显示以下内容<br>正在读取软件包列表… 完成<br>正在分析软件包的依赖关系树<br>正在读取状态信息… 完成<br>build-essential 已经是最新版 (12.1ubuntu2)。<br>升级了 0 个软件包，新安装了 0 个软件包，要卸载 0 个软件包，有 198 个软件包未被升级。</p><p>##3.    （第二步）安装依赖包，主要参考了如下2个文档，都包含了必备的包。</p><p>###（1）    <a href="https://blog.csdn.net/maxujian3893/article/details/64125988（较少安装包）" target="_blank" rel="noopener">https://blog.csdn.net/maxujian3893/article/details/64125988（较少安装包）</a></p><p>下面依赖关系主要是为了能够支持读写图片以及视频sudo apt-get install  libgtk2.0-dev libavcodec-dev libavformat-dev  libtiff4-dev（独有，提示已经被废弃，bruce并未安装。在使用pyth Ubuntu下叫做python-dev，CentOS下叫做python-devel，标记一下。）  libswscale-dev libjasper-dev<br>安装cmake，请输入命令 sudo apt-get install cmake<br>安装pkg-config。请输入命令： sudo apt-get install pkg-config  它是一个提供从源代码中编译软件时查询已安装的库时使用的统一接口的计算机软件。Ps.下图是查询Linux是否安装了某个包的方法</p><p>###（2）    <a href="https://blog.csdn.net/u011557212/article/details/54706966?utm_source=itdadao&amp;utm_medium=referral" target="_blank" rel="noopener">https://blog.csdn.net/u011557212/article/details/54706966?utm_source=itdadao&amp;utm_medium=referral</a> （较多安装包）<br>安装依赖包<br>sudo apt-get install cmake git libgtk2.0-dev（失败，难道16.04要换成3.0而不是2.0？） pkg-config libavcodec-dev libavformat-dev libswscale-dev<br>安装可选包<br>sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev</p><p>##4.    源码+编译工具安装+依赖包的安装 三者全部搞定之后，接下来就是要编译啦！</p><ul><li>a.    首先进入当前解压的源码包opencv所在目录opencv2.4.13.6  。使用的是cd命令或者是鼠标直接点击文件夹。</li><li>b.    创建一个新的文件夹。输入指令： mkdir release</li><li>c.    进入该release文件夹。输入指令：cd release</li><li>d.    编译。输入命令：（最后在local接着的是两个点，不要忘了，最后直接复制粘贴进命令行）会比较耗时，比如会花费20分钟来编译，会有进度显示哒。<br>cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local ..</li><li>e.    开启线程(按照自己的配置,处理器核数*2)。输入命令： make -j4</li><li>f.    sudo make install （这一步也很快）<br>##5.    opencv大致安装完毕，但还没结束哦。接下来就是要配置环境啦！不然还是没法用opencv的哦！</li><li>a.    在文件/etc/ld.so.conf中添加 /usr/local/lib (这里就是上文中您的安装目录下的)</li><li>b.    当我们打开、/etc/ld.so.conf文件时，发现它的属性为只读，则终端上输入以下命令： sudo chmod 666 /etc/ld.so.conf 改变文件属性为允许所有用户对该文件进行读写操作然后另起一行输入/usr/local/lib了。</li><li>c.    完成动态库的共享。请输入 sudo ldconfig –v<br>##6.    接下来，配置opencv的头文件位置！</li><li>a.    输入命令： sudo gedit /etc/bash.bashrc   进入编辑页面。</li><li>b.    在编辑命令输入以下内容：<br>PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig  并保存下来。</li><li>c.    终端输入命令：<br>export PKG_CONFIG_PATH</li><li>d.    使配置生效。终端输入命令:<br>sudo source /etc/bash.bashrc  的</li><li>e.    由于source为root命令，需要root权限。<br>输入命令：su bruce（bruce为我本人的用户名，请换成您自己的）然后按提示进行。</li><li>f． 再次使配置生效。终端输入命令：<br>  source /etc/bash.bashrc</li><li>g．退出。终端输入命令：quit()或者直接键盘按住 Ctrl+D 这两个按键。</li><li>h. 更新database。终端输入命令：  sudo updatedb   </li></ul><p>##7.    选择一个demo进行测试。<br>完工啦！！！哈哈，最后就可以来测试我们是否搞定这个opencv的配置啦</p><ul><li>a. 在解压的opencv目录下找到 samples/c/文件夹。在该文件夹下输入终端指令：   ./build_all.sh    (这一步将会花费大概1分钟左右时间编译)</li><li>b. 编译完成后，选一个运行，比如 find_obj 程序。<br>该文件夹下终端输入：  ./ find_obj    嘻嘻，一两秒内有看到图片了吧</li></ul><p>##8.    python与opencv的接口配置。<br>ubuntu16.04自带python2.7和python3.5。在安装完Opencv后，我们安装Python-opencv，<br>请在终端输入命令 ： sudo apt-get install python-opencv<br>也可以安装python-numpy ： sudo apt-get install python-numpy<br>终端输入： cd ~ 进入根目录。<br>再输入python  回车键后，显示python的版本信息，<br>最后输入import cv  ,如果没有弹出任何信息，说明接口配置成功。</p><ul><li><p>参考资料：<br>【1】    <a href="https://blog.csdn.net/maxujian3893/article/details/64125988" target="_blank" rel="noopener">https://blog.csdn.net/maxujian3893/article/details/64125988</a><br>【2】    <a href="https://blog.csdn.net/u011557212/article/details/54706966?utm_source=itdadao&amp;utm_medium=referral" target="_blank" rel="noopener">https://blog.csdn.net/u011557212/article/details/54706966?utm_source=itdadao&amp;utm_medium=referral</a></p></li><li><p>p．s．相关问题。<br>打开 vi 可以， 不过应该是乱码。直接运行吧<br>比如说 你写了一个 c程序 helloworld.c<br>你用命令gcc -o helloworld.o helloworld.c<br>就会生成一个可执行的文件 helloworld.o<br>用命令 ./helloworld.o就可以执行了<br>（注意 点斜杠 是运行，有一点的）</p></li></ul><p>– </p><h3 id="嘿嘿，偷懒了，部分步骤图我还没有添加上来，等过几天闲下来了再加上来！！"><a href="#嘿嘿，偷懒了，部分步骤图我还没有添加上来，等过几天闲下来了再加上来！！" class="headerlink" title="嘿嘿，偷懒了，部分步骤图我还没有添加上来，等过几天闲下来了再加上来！！"></a>嘿嘿，偷懒了，部分步骤图我还没有添加上来，等过几天闲下来了再加上来！！</h3>]]></content>
      
      
    </entry>
    
    <entry>
      <title>test</title>
      <link href="/2018/06/23/test/"/>
      <url>/2018/06/23/test/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/06/23/hello-world/"/>
      <url>/2018/06/23/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
    
    <entry>
      <title>links</title>
      <link href="/links/index.html"/>
      <url>/links/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
