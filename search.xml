<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <link href="/2018/06/24/ubuntu16.04%E5%AE%89%E8%A3%85opencv2.4.13.6byBruce/"/>
      <url>/2018/06/24/ubuntu16.04%E5%AE%89%E8%A3%85opencv2.4.13.6byBruce/</url>
      <content type="html"><![CDATA[<p>#Ubuntu16.04安装opencv2.4.13.6及配置环境</p><p>##1.准备阶段<br>官网下载源码包，存到Linux下的“下载”，并解压。<br>bruce@bruce-virtual-machine:~/下载$ unzip opencv-2.4.13.6.zip</p><p>##2.    （第一步）安装编译工具。<br>bruce@bruce-virtual-machine:~$ sudo apt-get install build-essential<br>则会显示以下内容<br>正在读取软件包列表… 完成<br>正在分析软件包的依赖关系树<br>正在读取状态信息… 完成<br>build-essential 已经是最新版 (12.1ubuntu2)。<br>升级了 0 个软件包，新安装了 0 个软件包，要卸载 0 个软件包，有 198 个软件包未被升级。</p><p>##3.    （第二步）安装依赖包，主要参考了如下2个文档，都包含了必备的包。</p><p>###（1）    <a href="https://blog.csdn.net/maxujian3893/article/details/64125988（较少安装包）" target="_blank" rel="noopener">https://blog.csdn.net/maxujian3893/article/details/64125988（较少安装包）</a></p><p>下面依赖关系主要是为了能够支持读写图片以及视频sudo apt-get install  libgtk2.0-dev libavcodec-dev libavformat-dev  libtiff4-dev（独有，提示已经被废弃，bruce并未安装。在使用pyth Ubuntu下叫做python-dev，CentOS下叫做python-devel，标记一下。）  libswscale-dev libjasper-dev<br>安装cmake，请输入命令 sudo apt-get install cmake<br>安装pkg-config。请输入命令： sudo apt-get install pkg-config  它是一个提供从源代码中编译软件时查询已安装的库时使用的统一接口的计算机软件。Ps.下图是查询Linux是否安装了某个包的方法</p><p>###（2）    <a href="https://blog.csdn.net/u011557212/article/details/54706966?utm_source=itdadao&amp;utm_medium=referral" target="_blank" rel="noopener">https://blog.csdn.net/u011557212/article/details/54706966?utm_source=itdadao&amp;utm_medium=referral</a> （较多安装包）<br>安装依赖包<br>sudo apt-get install cmake git libgtk2.0-dev（失败，难道16.04要换成3.0而不是2.0？） pkg-config libavcodec-dev libavformat-dev libswscale-dev<br>安装可选包<br>sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev</p><p>##4.    源码+编译工具安装+依赖包的安装 三者全部搞定之后，接下来就是要编译啦！</p><ul><li>a.    首先进入当前解压的源码包opencv所在目录opencv2.4.13.6  。使用的是cd命令或者是鼠标直接点击文件夹。</li><li>b.    创建一个新的文件夹。输入指令： mkdir release</li><li>c.    进入该release文件夹。输入指令：cd release</li><li>d.    编译。输入命令：（最后在local接着的是两个点，不要忘了，最后直接复制粘贴进命令行）会比较耗时，比如会花费20分钟来编译，会有进度显示哒。<br>cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local ..</li><li>e.    开启线程(按照自己的配置,处理器核数*2)。输入命令： make -j4</li><li>f.    sudo make install （这一步也很快）<br>##5.    opencv大致安装完毕，但还没结束哦。接下来就是要配置环境啦！不然还是没法用opencv的哦！</li><li>a.    在文件/etc/ld.so.conf中添加 /usr/local/lib (这里就是上文中您的安装目录下的)</li><li>b.    当我们打开、/etc/ld.so.conf文件时，发现它的属性为只读，则终端上输入以下命令： sudo chmod 666 /etc/ld.so.conf 改变文件属性为允许所有用户对该文件进行读写操作然后另起一行输入/usr/local/lib了。</li><li>c.    完成动态库的共享。请输入 sudo ldconfig –v<br>##6.    接下来，配置opencv的头文件位置！</li><li>a.    输入命令： sudo gedit /etc/bash.bashrc   进入编辑页面。</li><li>b.    在编辑命令输入以下内容：<br>PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig  并保存下来。</li><li>c.    终端输入命令：<br>export PKG_CONFIG_PATH</li><li>d.    使配置生效。终端输入命令:<br>sudo source /etc/bash.bashrc  的</li><li>e.    由于source为root命令，需要root权限。<br>输入命令：su bruce（bruce为我本人的用户名，请换成您自己的）然后按提示进行。</li><li>f． 再次使配置生效。终端输入命令：<br>  source /etc/bash.bashrc</li><li>g．退出。终端输入命令：quit()或者直接键盘按住 Ctrl+D 这两个按键。</li><li>h. 更新database。终端输入命令：  sudo updatedb   </li></ul><p>##7.    选择一个demo进行测试。<br>完工啦！！！哈哈，最后就可以来测试我们是否搞定这个opencv的配置啦</p><ul><li>a. 在解压的opencv目录下找到 samples/c/文件夹。在该文件夹下输入终端指令：   ./build_all.sh    (这一步将会花费大概1分钟左右时间编译)</li><li>b. 编译完成后，选一个运行，比如 find_obj 程序。<br>该文件夹下终端输入：  ./ find_obj    嘻嘻，一两秒内有看到图片了吧</li></ul><p>##8.    python与opencv的接口配置。<br>ubuntu16.04自带python2.7和python3.5。在安装完Opencv后，我们安装Python-opencv，<br>请在终端输入命令 ： sudo apt-get install python-opencv<br>也可以安装python-numpy ： sudo apt-get install python-numpy<br>终端输入： cd ~ 进入根目录。<br>再输入python  回车键后，显示python的版本信息，<br>最后输入import cv  ,如果没有弹出任何信息，说明接口配置成功。</p><ul><li><p>参考资料：<br>【1】    <a href="https://blog.csdn.net/maxujian3893/article/details/64125988" target="_blank" rel="noopener">https://blog.csdn.net/maxujian3893/article/details/64125988</a><br>【2】    <a href="https://blog.csdn.net/u011557212/article/details/54706966?utm_source=itdadao&amp;utm_medium=referral" target="_blank" rel="noopener">https://blog.csdn.net/u011557212/article/details/54706966?utm_source=itdadao&amp;utm_medium=referral</a></p></li><li><p>p．s．相关问题。<br>打开 vi 可以， 不过应该是乱码。直接运行吧<br>比如说 你写了一个 c程序 helloworld.c<br>你用命令gcc -o helloworld.o helloworld.c<br>就会生成一个可执行的文件 helloworld.o<br>用命令 ./helloworld.o就可以执行了<br>（注意 点斜杠 是运行，有一点的）</p></li></ul><p>– </p><h3 id="嘿嘿，偷懒了，部分步骤图我还没有添加上来，等过几天闲下来了再加上来！！"><a href="#嘿嘿，偷懒了，部分步骤图我还没有添加上来，等过几天闲下来了再加上来！！" class="headerlink" title="嘿嘿，偷懒了，部分步骤图我还没有添加上来，等过几天闲下来了再加上来！！"></a>嘿嘿，偷懒了，部分步骤图我还没有添加上来，等过几天闲下来了再加上来！！</h3>]]></content>
      
      
    </entry>
    
    <entry>
      <title>test</title>
      <link href="/2018/06/23/test/"/>
      <url>/2018/06/23/test/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/06/23/hello-world/"/>
      <url>/2018/06/23/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
    
    <entry>
      <title>links</title>
      <link href="/links/index.html"/>
      <url>/links/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
